{"version":3,"sources":["serviceWorker.js","util.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","analisarResposta","response","ok","status","Error","Formatters","cell","row","rowIndex","formatExtraData","q","quantidadePalavras","palavras","split","recorte","length","slice","join","App","props","columns","dataField","text","headerStyle","colum","colIndex","width","formatter","palavrasContadas","expandRow","renderer","state","termo","recortes","usuario","senha","isActive","tipoPesquisa","event","preventDefault","url","this","objetoTipoPesquisa","console","log","headers","method","Headers","encode","setState","fetch","then","json","jsonResponse","catch","err","alert","message","target","value","Jumbotron","Container","Form","Row","Col","sm","Group","controlId","Label","className","Control","placeholder","onChange","handleUsuario","bind","type","handleSenha","autoComplete","Check","label","handleRadioChange","checked","handleTermo","Button","size","variant","onClick","pesquisar","active","spinner","bootstrap4","keyField","data","pagination","paginationFactory","striped","hover","nup","t","termosAjustados","React","Component","ReactDOM","render","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iIAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4JCbC,SAASC,EAAiBC,GAE7B,GAAIA,EAASC,GACT,OAAOD,EAGP,GAAwB,MAApBA,EAASE,OACT,MAAM,IAAIC,MAAM,6EAEpB,GAAwB,MAApBH,EAASE,OACT,MAAM,IAAIC,MAAM,oCAcrB,IAAMC,EAAb,8GAE4BC,EAAMC,EAAKC,EAAUC,GAEzC,IAAMC,EAAID,EAAgBE,mBACpBC,EAAWN,EAAKO,MAAM,KACtBC,EAAUF,EAASG,OAASL,EAAIE,EAASI,MAAM,EAAGN,GAAGO,KAAK,KAAO,SAAWX,EAElF,OAAQ,8BAAOQ,OARvB,K,qDChBqBI,E,YA+BjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KA9BVC,QAAU,CAAC,CACPC,UAAW,KACXC,KAAM,KACNC,YAAa,SAACC,EAAOC,GACjB,MAAO,CAAEC,MAAO,WAErB,CACCL,UAAW,kBACXC,KAAM,OACNC,YAAa,SAACC,EAAOC,GACjB,MAAO,CAAEC,MAAO,WAErB,CACCL,UAAW,UACXC,KAAM,UACNK,UAAWtB,EAAWuB,iBACtBnB,gBAAiB,CACbE,mBAAoB,KAYT,EARnBkB,UAAY,CACRC,SAAU,SAAAvB,GAAG,OACT,6BACI,2BAAIA,EAAIO,YAShB,EAAKiB,MAAQ,CACTC,MAAO,GACPC,SAAU,GACVC,QAAS,GACTC,MAAO,GACPC,UAAU,EACVC,aAAc,OAVH,E,uEAyCTC,GAAQ,IAAD,OAGbA,EAAMC,iBAEN,IAAMC,EAAMC,KAAKC,mBAAmBF,IACpCG,QAAQC,IAAIJ,GACZ,IDzE0BN,EAASC,ECyE7BU,GDzEoBX,ECyEQO,KAAKV,MAAMG,QDzEVC,ECyEmBM,KAAKV,MAAMI,MDvE9D,CACHW,OAAQ,MACRD,QAAS,IAAIE,QAAQ,CACjB,cAAiB,SAAWC,iBAAOd,EAAU,IAAMC,OCuEvDM,KAAKQ,SAAS,CAAEb,UAAU,IAG1Bc,MAAMV,EAAKK,GACNM,KAAKnD,GACLmD,MAAK,SAAAlD,GAAQ,OAAIA,EAASmD,UAC1BD,MAAK,SAAAE,GAEF,EAAKJ,SAAS,CACVhB,SAAUoB,EACVjB,UAAU,OAGjBkB,OAAM,SAAAC,GAEH,EAAKN,SAAS,CAAEb,UAAU,IAC1BoB,MAAMD,EAAIE,c,kCAIVnB,GAERG,KAAKQ,SAAS,CAAEjB,MAAOM,EAAMoB,OAAOC,U,kCAG5BrB,GAERG,KAAKQ,SAAS,CAAEd,MAAOG,EAAMoB,OAAOC,U,oCAG1BrB,GAEVG,KAAKQ,SAAS,CAAEf,QAASI,EAAMoB,OAAOC,U,wCAGxBrB,GACdG,KAAKQ,SAAS,CACVjB,MAAO,GACPC,SAAU,GACVI,aAAcC,EAAMoB,OAAOC,U,+BAK/B,OACI,6BACI,kBAACC,EAAA,EAAD,KACI,qDAEJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACF,EAAA,EAAKI,MAAN,CAAYC,UAAU,WAClB,kBAACL,EAAA,EAAKM,MAAN,CAAYC,UAAU,SAAtB,cACA,kBAACP,EAAA,EAAKQ,QAAN,CAAcC,YAAY,QAAQZ,MAAOlB,KAAKV,MAAMG,QAChDsC,SAAU/B,KAAKgC,cAAcC,KAAKjC,WAIlD,kBAACsB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACF,EAAA,EAAKI,MAAN,CAAYC,UAAU,SAClB,kBAACL,EAAA,EAAKM,MAAN,CAAYC,UAAU,SAAtB,SACA,kBAACP,EAAA,EAAKQ,QAAN,CAAcK,KAAK,WAAWJ,YAAY,QAAQZ,MAAOlB,KAAKV,MAAMI,MAChEqC,SAAU/B,KAAKmC,YAAYF,KAAKjC,MAAOoC,aAAa,WAIpE,kBAACd,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACF,EAAA,EAAKI,MAAN,KACI,kBAACJ,EAAA,EAAKM,MAAN,CAAYC,UAAU,SAAtB,oBAGA,kBAACP,EAAA,EAAKgB,MAAN,CACIH,KAAK,QACLI,MAAM,wBACNpB,MAAM,MACNa,SAAU/B,KAAKuC,kBAAkBN,KAAKjC,MACtCwC,QAAqC,QAA5BxC,KAAKV,MAAMM,eAExB,kBAACyB,EAAA,EAAKgB,MAAN,CACIH,KAAK,QACLI,MAAM,2BACNpB,MAAM,IACNa,SAAU/B,KAAKuC,kBAAkBN,KAAKjC,MACtCwC,QAAqC,MAA5BxC,KAAKV,MAAMM,eAExB,kBAACyB,EAAA,EAAKgB,MAAN,CACIH,KAAK,QACLI,MAAM,SACNpB,MAAM,IACNa,SAAU/B,KAAKuC,kBAAkBN,KAAKjC,MACtCwC,QAAqC,MAA5BxC,KAAKV,MAAMM,kBAKpC,kBAAC0B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACF,EAAA,EAAKI,MAAN,CAAYC,UAAU,WAClB,kBAACL,EAAA,EAAKM,MAAN,CAAYC,UAAU,SACjB5B,KAAKC,mBAAmBqC,OAE7B,kBAACjB,EAAA,EAAKQ,QAAN,CAAcK,KAAK,OAAOJ,YAAa9B,KAAKC,mBAAmB6B,YAAaZ,MAAOlB,KAAKV,MAAMC,MAC1FwC,SAAU/B,KAAKyC,YAAYR,KAAKjC,WAIhD,kBAACsB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACmB,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAAQ,UAAUV,KAAK,SAASW,QAAS7C,KAAK8C,UAAUb,KAAKjC,OAA/E,gBAMZ,kBAACuB,EAAA,EAAD,CAAKC,IAAE,GACH,qDACA,kBAAC,IAAD,CAAgBuB,OAAQ/C,KAAKV,MAAMK,SAAUqD,SAAO,EAACnE,KAAK,kBACtD,kBAAC,IAAD,CAAgBoE,YAAU,EAACC,SAAS,KAAKC,KAAMnD,KAAKV,MAAME,SAAUb,QAASqB,KAAKrB,QAC9EyE,WAAYC,MAAqBC,SAAO,EAACC,OAAK,EAACnE,UAAWY,KAAKZ,oB,sCA/J/F,OAAOY,KAAKV,MAAMC,MAAMnB,MAAM,KAAKI,KAAK,O,yCAqBxC,MAjBa,CACTgF,IAAK,CACDlB,MAAO,wBACPR,YAAa,iCACb/B,IAAI,2CAAD,OAA6CC,KAAKV,MAAMC,QAE/DkE,EAAG,CACCnB,MAAO,wBACPR,YAAa,oCACb/B,IAAI,yCAAD,OAA2CC,KAAKV,MAAMC,QAE7DtB,EAAG,CACCqE,MAAO,SACPR,YAAa,kCACb/B,IAAI,yCAAD,OAA2CC,KAAK0D,mBAG/C1D,KAAKV,MAAMM,kB,GApEE+D,IAAMC,W,gBCJvCC,IAASC,OAAO,kBAAC,IAAD,KACZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWxF,MAE7ByF,SAASC,eAAe,SHoHrC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,MAAK,SAAA6D,GACjCA,EAAaC,iB","file":"static/js/main.7d984930.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport { encode } from 'base-64';\nimport React from 'react';\n\n\nexport function analisarResposta(response) {\n\n    if (response.ok) {\n        return response\n    }\n    else {\n        if (response.status === 401)\n            throw new Error('Não foi possível autenticar na API. Verifique o usuário e senha.')\n\n        if (response.status === 404)\n            throw new Error('O recorte não foi localizado.')\n    }\n}\n\nexport function getRequestHeaders(usuario, senha) {\n\n    return {\n        method: 'get',\n        headers: new Headers({\n            'Authorization': 'Basic ' + encode(usuario + ':' + senha)\n        })\n    }\n}\n\nexport class Formatters {\n\n    static palavrasContadas(cell, row, rowIndex, formatExtraData) {\n\n        const q = formatExtraData.quantidadePalavras;\n        const palavras = cell.split(' ');\n        const recorte = palavras.length > q ? palavras.slice(0, q).join(' ') + ' (...)' : cell;\n\n        return (<span>{recorte}</span>);\n    }\n}\n","\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport './App.css';\n\nimport React from 'react';\nimport LoadingOverlay from 'react-loading-overlay';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport { analisarResposta, getRequestHeaders, Formatters } from './util';\nimport { Jumbotron, Button, Row, Col, Container, Form } from 'react-bootstrap';\n\n\nexport default class App extends React.Component {\n\n    columns = [{\n        dataField: 'id',\n        text: 'Id',\n        headerStyle: (colum, colIndex) => {\n            return { width: '100px' };\n        }\n    }, {\n        dataField: 'data_publicacao',\n        text: 'Data',\n        headerStyle: (colum, colIndex) => {\n            return { width: '150px' };\n        }\n    }, {\n        dataField: 'recorte',\n        text: 'Recorte',\n        formatter: Formatters.palavrasContadas,\n        formatExtraData: {\n            quantidadePalavras: 5\n        }\n    }];\n\n    expandRow = {\n        renderer: row => (\n            <div>\n                <p>{row.recorte}</p>\n            </div>\n        )\n    };\n\n    constructor(props) {\n        super(props);\n\n        // 00000181319918260236\n        this.state = {\n            termo: '',\n            recortes: [],\n            usuario: '',\n            senha: '',\n            isActive: false,\n            tipoPesquisa: 'nup'\n        };\n    }\n\n    get termosAjustados() {\n\n        return this.state.termo.split(' ').join('-');\n    }\n\n    get objetoTipoPesquisa() {\n        const tipo = {\n            nup: {\n                label: 'Número do Processo',\n                placeholder: 'Digite o número do processo',\n                url: `http://localhost:8001/api/recortes/?nup=${this.state.termo}`\n            },\n            t: {\n                label: 'Data de Criação',\n                placeholder: 'Data de criação do processo',\n                url: `http://localhost:8001/api/recortes/?t=${this.state.termo}`\n            },\n            q: {\n                label: 'Termos',\n                placeholder: 'Termos separados por espaços',\n                url: `http://localhost:8001/api/recortes/?q=${this.termosAjustados}`\n            }\n        }\n        return tipo[this.state.tipoPesquisa];\n    }\n\n\n    pesquisar(event) {\n\n        // Evita que o formulário seja enviado.\n        event.preventDefault();\n\n        const url = this.objetoTipoPesquisa.url;\n        console.log(url)\n        const headers = getRequestHeaders(this.state.usuario, this.state.senha);\n\n        // Ativa o loading.\n        this.setState({ isActive: true });\n\n        // Executa a consulta remota.\n        fetch(url, headers)\n            .then(analisarResposta)\n            .then(response => response.json())\n            .then(jsonResponse => {\n\n                this.setState({\n                    recortes: jsonResponse,\n                    isActive: false\n                })\n            })\n            .catch(err => {\n\n                this.setState({ isActive: false });\n                alert(err.message)\n            })\n    }\n\n    handleTermo(event) {\n\n        this.setState({ termo: event.target.value });\n    }\n\n    handleSenha(event) {\n\n        this.setState({ senha: event.target.value });\n    }\n\n    handleUsuario(event) {\n\n        this.setState({ usuario: event.target.value });\n    }\n\n    handleRadioChange(event) {\n        this.setState({\n            termo: '',\n            recortes: [],\n            tipoPesquisa: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Jumbotron>\n                    <h1>Pesquisa de Recortes</h1>\n                </Jumbotron>\n                <Container>\n                    <Form>\n                        <Row>\n                            <Col sm={4}>\n                                <Row>\n                                    <Col>\n                                        <Form.Group controlId=\"usuario\">\n                                            <Form.Label className=\"Label\">Usuário</Form.Label>\n                                            <Form.Control placeholder=\"Login\" value={this.state.usuario}\n                                                onChange={this.handleUsuario.bind(this)} />\n                                        </Form.Group>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col>\n                                        <Form.Group controlId=\"senha\">\n                                            <Form.Label className=\"Label\">Senha</Form.Label>\n                                            <Form.Control type=\"password\" placeholder=\"Senha\" value={this.state.senha}\n                                                onChange={this.handleSenha.bind(this)} autoComplete=\"off\" />\n                                        </Form.Group>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col>\n                                        <Form.Group>\n                                            <Form.Label className=\"Label\">\n                                                Tipo de Pesquisa\n                                            </Form.Label>\n                                            <Form.Check\n                                                type=\"radio\"\n                                                label=\"Número do Processo\"\n                                                value=\"nup\"\n                                                onChange={this.handleRadioChange.bind(this)}\n                                                checked={this.state.tipoPesquisa === 'nup'}\n                                            />\n                                            <Form.Check\n                                                type=\"radio\"\n                                                label=\"Data de Publicação\"\n                                                value=\"t\"\n                                                onChange={this.handleRadioChange.bind(this)}\n                                                checked={this.state.tipoPesquisa === 't'}\n                                            />\n                                            <Form.Check\n                                                type=\"radio\"\n                                                label=\"Termos\"\n                                                value=\"q\"\n                                                onChange={this.handleRadioChange.bind(this)}\n                                                checked={this.state.tipoPesquisa === 'q'}\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col>\n                                        <Form.Group controlId=\"formNup\">\n                                            <Form.Label className=\"Label\">\n                                                {this.objetoTipoPesquisa.label}\n                                            </Form.Label>\n                                            <Form.Control type=\"text\" placeholder={this.objetoTipoPesquisa.placeholder} value={this.state.termo}\n                                                onChange={this.handleTermo.bind(this)} />\n                                        </Form.Group>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col>\n                                        <Button size=\"sm\" variant=\"primary\" type=\"submit\" onClick={this.pesquisar.bind(this)} >\n                                            Pesquisar\n                                    </Button>\n                                    </Col>\n                                </Row>\n                            </Col>\n                            <Col sm>\n                                <h3>Resultado da Pesquisa</h3>\n                                <LoadingOverlay active={this.state.isActive} spinner text='Pesquisando...'>\n                                    <BootstrapTable bootstrap4 keyField='id' data={this.state.recortes} columns={this.columns}\n                                        pagination={paginationFactory()} striped hover expandRow={this.expandRow} />\n                                </LoadingOverlay>\n                            </Col>\n                        </Row>\n                    </Form>\n                </Container>\n            </div>\n        );\n    }\n}\n","\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\n\nReactDOM.render(<BrowserRouter>\n    <Switch>\n        <Route path=\"/\" exact={true} component={App} />\n    </Switch>\n</ BrowserRouter>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}